//
// Utilities
//
// What you will find here:
// 01. General-use classes & Accessibility
// 02. Mixins
//	-- Style mixins
//	-- Responsive mixins

// ---------------- 01. General-use classes & Accessibility

.assistive-text,
.visuallyhidden,
.screen-reader-text {
	position: absolute !important;
	clip: rect(1px, 1px, 1px, 1px);
	padding: 0 !important;
	border: 0 !important;
	height: 1px !important;
	width: 1px !important;
	overflow: hidden;
}


// ---------------- 02. Mixins

// Style mixins

@mixin button-primary(
		$color: $button-background-color,
		$text: $button-text-color,
		$color-hover: $button-background-color-hover,
		$text-hover: $button-text-color-hover,
		$this-transition-speed: $transition-speed,
		$padding: $default-button-padding ) {
	background: transparentize( $color, 0.2 );
	padding: $padding;
	text-align: center;
	text-decoration: none;
	color: $text !important;
	border-radius: $border-radius;
	display: inline-block;
	border: 1px solid darken( $color, 20 );
	text-shadow: 1px 1px 0 rgba( 0, 0, 0, 0.43 );
	box-shadow: 0px 0px 3px transparentize( $color, 0.5 );
	transition: all $this-transition-speed ease;

	&:hover,
	&:focus,
	&:visited:hover {
		background: $color-hover;
		color: $text-hover !important;
	}
}

// Effect for clicking on buttons and such
@mixin button-active() {
	transition: transform ($transition-speed  * .6) ease;
	&:active {
		transform: scale(0.96);
	}
}


@mixin inverse-colors(
	$text: $inverse-text-color,
	$link: $inverse-link-color,
	$link-hover: $inverse-link-color-hover ) {
	color: $text;
	a,
	a:visited {
		color: $link;

		&:hover,
		&:focus,
		&:active {
			color: $link-hover;
		}
	}
}

// Center a block element
@mixin push--auto {
	margin: {
		left: auto;
		right: auto;
	}
}

// Make a block element full-window width (assuming it was centered)
// // Usage: .elem { @extend %push-fullwidth };
%push-fullwidth {
	width: 100vw;
	position: relative;
	left: 50%;
	margin-left: -50vw;
	// for rtl, just in case
	right: 50%;
	margin-right: -50vw;
}

// For pseudo elements (::before, ::after) has optional arguments
@mixin pseudo($display: block, $pos: absolute, $content: '') {
	content: $content;
	display: $display;
	position: $pos;
}

// For scalable items that require a specific aspect ratio (like videos)
// Usage: .elem { @include responsive-ratio(16,9); }
@mixin responsive-ratio($x,$y, $pseudo: false) {
	$padding: unquote( ( $y / $x ) * 100 + '%' );
	@if $pseudo {
		&:before {
			@include pseudo($pos: relative);
			width: 100%;
			padding-top: $padding;
		}
	} @else {
		padding-top: $padding;
	}
}

// Triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
	@include pseudo($pos: $position);
	width: 0;
	height: 0;
	@if $round {
		border-radius: 3px;
	}
	@if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
		margin-top: 0 - round( $size / 2.5 );
	} @else if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
		margin-bottom: 0 - round( $size / 2.5 );
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		margin-right: -$size;
	} @else if  $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		margin-left: -$size;
	}
}

// Placeholders
// Usage: .elem { @include input-placeholder { color: red; } }
@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

// Truncate
@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

// Vertical Centering
@mixin vertical-center {
	position: relative;
	top: 50%;
	-ms-transform: translateY(-50%);
	-webkit-transform: translateY(-50%);
	transform: translateY(-50%);
}

// Font-Face
@mixin font-face($name, $file) {
	@font-face {
		font-family: "#{$name}";
		src: url("../fonts/#{$file}.eot");
		src: url("../fonts/#{$file}.eot?#iefix") format("embedded-opentype"),
		url("../fonts/#{$file}.woff") format("woff"),
		url("../fonts/#{$file}.ttf") format("truetype"),
		url("../fonts/#{$file}.svg?#webfont") format("svg");
	}
}

// Retina-Ready Background Images
@mixin retina-image($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}

// Absolute Positioning
@mixin abs-position ($top, $right, $bottom, $left) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

// Clearfix
// Usage: .elem { @extend %clearfix };
%clearfix {
	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Responsive mixins
// These were originally written as wrappers around various breakpoint() calls,
// but in August 2017 we left breakpoint for include-media so these are kinda silly.

@mixin phone-only {
	@include media( '<=phone' ) { @content; }
}

@mixin tablet-only {
	@include media( '>phone', '<=tablet' ) { @content; }
}

@mixin desktop-only {
	@include media( '>tablet', '<=wide' ) { @content; }
}

@mixin large-desktop {
	@include media( '>wide' ) { @content; }
}

@mixin tablet-down {
	@include media( '<=tablet' ) { @content; }
}

@mixin tablet-up {
	@include media( '>tablet' ) { @content; }
}

// Pull up
.pull-up {
	margin-top: $default-text-pullup-margin !important;
}